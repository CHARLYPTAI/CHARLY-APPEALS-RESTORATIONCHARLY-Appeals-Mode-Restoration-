# ============================================================================
# CHARLY PLATFORM - PRODUCTION DOCKER COMPOSE
# Apple CTO Enterprise Production Deployment - Phase 3A
# ============================================================================

version: '3.8'

services:
  # ============================================================================
  # CHARLY APPLICATION
  # ============================================================================
  charly-app:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: charly-production
    restart: unless-stopped
    ports:
      - "8080:8080"  # Frontend (Nginx)
      - "8000:8000"  # Backend API (FastAPI)
    environment:
      - NODE_ENV=production
      - VITE_APP_ENV=production
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://charly:${DB_PASSWORD}@postgres:5432/charly_prod
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENABLE_MONITORING=true
    volumes:
      - app-data:/app/data
      - app-logs:/var/log
      - ./config:/app/config:ro
    depends_on:
      - postgres
      - redis
    networks:
      - charly-network
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.charly.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.charly.tls=true"
      - "traefik.http.routers.charly.tls.certresolver=letsencrypt"

  # ============================================================================
  # DATABASE (PostgreSQL)
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: charly-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=charly_prod
      - POSTGRES_USER=charly
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - charly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U charly -d charly_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # ============================================================================
  # CACHE (Redis)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: charly-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - charly-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # ============================================================================
  # REVERSE PROXY (Traefik)
  # ============================================================================
  traefik:
    image: traefik:v3.0
    container_name: charly-traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --log.level=INFO
      - --accesslog=true
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
    networks:
      - charly-network
    environment:
      - TRAEFIK_API_DASHBOARD=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

  # ============================================================================
  # MONITORING (Prometheus + Grafana)
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: charly-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - charly-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls=true"

  grafana:
    image: grafana/grafana:latest
    container_name: charly-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - charly-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls=true"

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  charly-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-data:
    driver: local
  app-logs:
    driver: local
  traefik-letsencrypt:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local