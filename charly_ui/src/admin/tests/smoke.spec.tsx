/**\n * Smoke tests to verify admin shell components can be imported and instantiated\n * without external dependencies (no database, no API calls)\n */\n\nimport { describe, it, expect } from 'vitest';\n\n// Import components to verify they can be loaded\nimport * as AdminGuardModule from '../AdminGuard';\nimport * as RoutesModule from '../routes';\nimport * as AdminLayoutModule from '../AdminLayout';\nimport * as SidebarModule from '../components/Sidebar';\nimport * as TopbarModule from '../components/Topbar';\nimport * as TenantSwitcherModule from '../components/TenantSwitcher';\n\n// Import pages to verify they can be loaded\nimport * as DashboardModule from '../pages/Dashboard';\nimport * as TenantsModule from '../pages/Tenants';\nimport * as UsersModule from '../pages/Users';\nimport * as RulesTemplatesModule from '../pages/RulesTemplates';\nimport * as AuditLogsModule from '../pages/AuditLogs';\nimport * as SettingsModule from '../pages/Settings';\n\ndescribe('Admin Shell Smoke Tests', () => {\n  describe('Module Imports', () => {\n    it('should import AdminGuard module', () => {\n      expect(AdminGuardModule).toBeDefined();\n      expect(AdminGuardModule.AdminGuard).toBeDefined();\n      expect(AdminGuardModule.useAdmin).toBeDefined();\n      expect(AdminGuardModule.hasPermission).toBeDefined();\n      expect(AdminGuardModule.getPermissionsForRole).toBeDefined();\n    });\n\n    it('should import routes module', () => {\n      expect(RoutesModule).toBeDefined();\n      expect(RoutesModule.AdminRouter).toBeDefined();\n      expect(RoutesModule.adminRoutes).toBeDefined();\n    });\n\n    it('should import AdminLayout module', () => {\n      expect(AdminLayoutModule).toBeDefined();\n      expect(AdminLayoutModule.AdminLayout).toBeDefined();\n    });\n\n    it('should import component modules', () => {\n      expect(SidebarModule).toBeDefined();\n      expect(SidebarModule.Sidebar).toBeDefined();\n      \n      expect(TopbarModule).toBeDefined();\n      expect(TopbarModule.Topbar).toBeDefined();\n      \n      expect(TenantSwitcherModule).toBeDefined();\n      expect(TenantSwitcherModule.TenantSwitcher).toBeDefined();\n    });\n\n    it('should import all page modules', () => {\n      expect(DashboardModule).toBeDefined();\n      expect(DashboardModule.Dashboard).toBeDefined();\n      \n      expect(TenantsModule).toBeDefined();\n      expect(TenantsModule.Tenants).toBeDefined();\n      \n      expect(UsersModule).toBeDefined();\n      expect(UsersModule.Users).toBeDefined();\n      \n      expect(RulesTemplatesModule).toBeDefined();\n      expect(RulesTemplatesModule.RulesTemplates).toBeDefined();\n      \n      expect(AuditLogsModule).toBeDefined();\n      expect(AuditLogsModule.AuditLogs).toBeDefined();\n      \n      expect(SettingsModule).toBeDefined();\n      expect(SettingsModule.Settings).toBeDefined();\n    });\n  });\n\n  describe('Type Definitions', () => {\n    it('should have proper AdminUser type structure', () => {\n      const mockUser: AdminGuardModule.AdminUser = {\n        id: 'test-id',\n        email: 'test@example.com',\n        role: 'superadmin',\n        permissions: ['admin:system:read']\n      };\n      \n      expect(mockUser.id).toBe('test-id');\n      expect(mockUser.email).toBe('test@example.com');\n      expect(mockUser.role).toBe('superadmin');\n      expect(mockUser.permissions).toContain('admin:system:read');\n    });\n\n    it('should have proper permission type checking', () => {\n      const validPermissions: AdminGuardModule.Permission[] = [\n        'admin:tenants:read',\n        'admin:tenants:write',\n        'admin:users:read',\n        'admin:users:write',\n        'admin:roles:read',\n        'admin:roles:write',\n        'admin:templates:read',\n        'admin:templates:write',\n        'admin:integrations:read',\n        'admin:integrations:write',\n        'admin:audit:read',\n        'admin:system:read'\n      ];\n      \n      expect(validPermissions).toHaveLength(12);\n      expect(validPermissions).toContain('admin:tenants:read');\n      expect(validPermissions).toContain('admin:audit:read');\n    });\n\n    it('should have proper role type checking', () => {\n      const validRoles: AdminGuardModule.AdminRole[] = [\n        'superadmin',\n        'tenant_admin',\n        'auditor'\n      ];\n      \n      expect(validRoles).toHaveLength(3);\n      expect(validRoles).toContain('superadmin');\n      expect(validRoles).toContain('tenant_admin');\n      expect(validRoles).toContain('auditor');\n    });\n  });\n\n  describe('Permission System Functions', () => {\n    it('should calculate permissions for superadmin role', () => {\n      const permissions = AdminGuardModule.getPermissionsForRole('superadmin');\n      \n      expect(permissions).toContain('admin:tenants:read');\n      expect(permissions).toContain('admin:tenants:write');\n      expect(permissions).toContain('admin:users:read');\n      expect(permissions).toContain('admin:users:write');\n      expect(permissions).toContain('admin:system:read');\n      expect(permissions.length).toBeGreaterThan(8);\n    });\n\n    it('should calculate permissions for tenant_admin role', () => {\n      const permissions = AdminGuardModule.getPermissionsForRole('tenant_admin');\n      \n      expect(permissions).toContain('admin:users:read');\n      expect(permissions).toContain('admin:users:write');\n      expect(permissions).toContain('admin:templates:read');\n      expect(permissions).toContain('admin:audit:read');\n      expect(permissions).not.toContain('admin:tenants:read');\n      expect(permissions).not.toContain('admin:system:read');\n    });\n\n    it('should calculate permissions for auditor role', () => {\n      const permissions = AdminGuardModule.getPermissionsForRole('auditor');\n      \n      expect(permissions).toContain('admin:tenants:read');\n      expect(permissions).toContain('admin:users:read');\n      expect(permissions).toContain('admin:audit:read');\n      expect(permissions).not.toContain('admin:users:write');\n      expect(permissions).not.toContain('admin:tenants:write');\n    });\n\n    it('should validate permissions correctly', () => {\n      const superadminUser: AdminGuardModule.AdminUser = {\n        id: 'sa-1',\n        email: 'superadmin@example.com',\n        role: 'superadmin',\n        permissions: AdminGuardModule.getPermissionsForRole('superadmin')\n      };\n      \n      expect(AdminGuardModule.hasPermission(superadminUser, 'admin:tenants:read')).toBe(true);\n      expect(AdminGuardModule.hasPermission(superadminUser, 'admin:users:write')).toBe(true);\n      \n      const auditorUser: AdminGuardModule.AdminUser = {\n        id: 'aud-1',\n        email: 'auditor@example.com',\n        role: 'auditor',\n        permissions: AdminGuardModule.getPermissionsForRole('auditor')\n      };\n      \n      expect(AdminGuardModule.hasPermission(auditorUser, 'admin:audit:read')).toBe(true);\n      expect(AdminGuardModule.hasPermission(auditorUser, 'admin:users:write')).toBe(false);\n    });\n  });\n\n  describe('Route Configuration', () => {\n    it('should have all expected admin routes configured', () => {\n      const routes = RoutesModule.adminRoutes;\n      \n      expect(routes['/admin']).toBeDefined();\n      expect(routes['/admin/tenants']).toBeDefined();\n      expect(routes['/admin/users']).toBeDefined();\n      expect(routes['/admin/rules/templates']).toBeDefined();\n      expect(routes['/admin/audit/logs']).toBeDefined();\n      expect(routes['/admin/settings']).toBeDefined();\n    });\n\n    it('should have proper permission requirements for each route', () => {\n      const routes = RoutesModule.adminRoutes;\n      \n      expect(routes['/admin'].permissions).toContain('admin:system:read');\n      expect(routes['/admin/tenants'].permissions).toContain('admin:tenants:read');\n      expect(routes['/admin/users'].permissions).toContain('admin:users:read');\n      expect(routes['/admin/rules/templates'].permissions).toContain('admin:templates:read');\n      expect(routes['/admin/audit/logs'].permissions).toContain('admin:audit:read');\n      expect(routes['/admin/settings'].permissions).toContain('admin:system:read');\n    });\n\n    it('should have proper labels for navigation', () => {\n      const routes = RoutesModule.adminRoutes;\n      \n      expect(routes['/admin'].label).toBe('Dashboard');\n      expect(routes['/admin/tenants'].label).toBe('Tenants');\n      expect(routes['/admin/users'].label).toBe('Users');\n      expect(routes['/admin/rules/templates'].label).toBe('Rules Templates');\n      expect(routes['/admin/audit/logs'].label).toBe('Audit Logs');\n      expect(routes['/admin/settings'].label).toBe('Settings');\n    });\n  });\n\n  describe('Component Structure Validation', () => {\n    it('should not throw errors when importing components', () => {\n      // If we got this far, all imports succeeded\n      expect(true).toBe(true);\n    });\n\n    it('should have consistent TypeScript types across components', () => {\n      // Verify the AdminUser type is consistent across modules\n      const testUser: AdminGuardModule.AdminUser = {\n        id: 'test',\n        email: 'test@example.com',\n        role: 'superadmin',\n        permissions: ['admin:system:read']\n      };\n      \n      // Should not cause TypeScript errors\n      expect(testUser.role).toBe('superadmin');\n    });\n  });\n\n  describe('Error Scenarios', () => {\n    it('should handle invalid role gracefully', () => {\n      const permissions = AdminGuardModule.getPermissionsForRole('invalid' as any);\n      expect(permissions).toEqual([]);\n    });\n\n    it('should handle permission check with empty permissions array', () => {\n      const userWithNoPermissions: AdminGuardModule.AdminUser = {\n        id: 'empty',\n        email: 'empty@example.com',\n        role: 'auditor',\n        permissions: []\n      };\n      \n      expect(AdminGuardModule.hasPermission(userWithNoPermissions, 'admin:system:read')).toBe(false);\n    });\n  });\n});"