import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { useAppealsIntegrationStore } from "@/store/appealsIntegration";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/components/ui/use-toast";
import { Scale, Clock, CheckCircle, FileText, Calendar, Loader2, Zap, MapPin, DollarSign, Building, User, Calendar as CalendarIcon, AlertTriangle, X, Settings, Activity, Save, Upload, Download, Trash2, Bell, MessageSquare, Plus, Package } from "lucide-react";
import { AutomatedFiling } from "@/components/AutomatedFiling";
import TaxAttorneyWorkflow from "@/components/TaxAttorneyWorkflow";
import JurisdictionDropdown from "@/components/JurisdictionDropdown";
import { authenticatedRequest } from "@/lib/auth";

// Appeal interface for type safety
interface Appeal {
  id: string;
  property: string;
  jurisdiction: string;
  status: string;
  filedDate: string;
  currentAssessment?: number;
  proposedValue?: number;
  potentialSavings?: number;
  deadline?: string;
  hearingDate?: string;
  completedDate?: string;
  originalAssessment?: number;
  finalAssessment?: number;
  actualSavings?: number;
}

export function Appeals() {
  const { propertyId } = useParams();
  const { 
    currentAppealPrep, 
    getAppealFormData
  } = useAppealsIntegrationStore();
  
  const [isNewAppealModalOpen, setIsNewAppealModalOpen] = useState(false);
  const [isGeneratingNarrative, setIsGeneratingNarrative] = useState(false);
  const [isGeneratingPacket, setIsGeneratingPacket] = useState(false);
  const [generatedNarrative, setGeneratedNarrative] = useState("");
  
  // Appeal Details Modal State
  const [showAppealDetailsModal, setShowAppealDetailsModal] = useState(false);
  const [selectedAppeal, setSelectedAppeal] = useState<Appeal | null>(null);
  
  // Appeal Management Modal State
  const [showAppealManagementModal, setShowAppealManagementModal] = useState(false);
  const [managedAppeal, setManagedAppeal] = useState<Appeal | null>(null);
  const [managementTab, setManagementTab] = useState("status");
  
  // Certificate Generation State
  const [isGeneratingCertificate, setIsGeneratingCertificate] = useState(false);
  const [appealForm, setAppealForm] = useState({
    property_address: "",
    current_assessment: "",
    proposed_value: "",
    jurisdiction: "",
    reason: ""
  });

  // Bulk Generate and Export State
  const [selectedAppeals, setSelectedAppeals] = useState<string[]>([]);
  const [isBulkGenerating, setIsBulkGenerating] = useState(false);
  const [showBulkModal, setShowBulkModal] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  const [exportFormat, setExportFormat] = useState<'csv' | 'excel' | 'pdf'>('csv');

  const { toast } = useToast();

  // Handle incoming property data from Portfolio
  useEffect(() => {
    if (propertyId && currentAppealPrep) {
      // Auto-open the appeal modal with pre-filled data
      setIsNewAppealModalOpen(true);
      
      // Pre-fill the form with appeal data
      const formData = getAppealFormData();
      if (formData) {
        setAppealForm({
          property_address: formData.property_address,
          current_assessment: formData.current_assessment,
          proposed_value: formData.proposed_value,
          jurisdiction: formData.jurisdiction,
          reason: formData.reason
        });
        
        // If we have narratives, set the generated narrative
        if (currentAppealPrep.analysisResult.narratives) {
          const narratives = currentAppealPrep.analysisResult.narratives;
          const combinedNarrative = generateCombinedNarrative(narratives);
          setGeneratedNarrative(combinedNarrative);
        }
        
        toast({
          title: "Appeal Data Loaded",
          description: `Property data and AI narratives loaded for ${formData.property_address}`,
        });
      }
    }
  }, [propertyId, currentAppealPrep, getAppealFormData, toast]);
  
  // Helper function to combine all three AI narratives into a comprehensive appeal document
  const generateCombinedNarrative = (narratives: {
    income_summary?: { narrative?: string };
    sales_comparison?: { narrative?: string };
    cost_approach?: { narrative?: string };
  }) => {
    let combinedNarrative = "";
    
    if (narratives.income_summary?.narrative) {
      combinedNarrative += "=== INCOME APPROACH ANALYSIS ===\n\n";
      combinedNarrative += narratives.income_summary.narrative + "\n\n";
    }
    
    if (narratives.sales_comparison?.narrative) {
      combinedNarrative += "=== SALES COMPARISON APPROACH ===\n\n";
      combinedNarrative += narratives.sales_comparison.narrative + "\n\n";
    }
    
    if (narratives.cost_approach?.narrative) {
      combinedNarrative += "=== COST APPROACH ANALYSIS ===\n\n";
      combinedNarrative += narratives.cost_approach.narrative + "\n\n";
    }
    
    combinedNarrative += "=== COMPREHENSIVE CONCLUSION ===\n\n";
    combinedNarrative += "Based on the comprehensive analysis using all three standard valuation approaches (Income, Sales Comparison, and Cost), ";
    combinedNarrative += "the evidence clearly supports a reduction in the current assessment. All methodologies indicate the property is ";
    combinedNarrative += "over-assessed relative to its fair market value. We respectfully request the assessment board consider this ";
    combinedNarrative += "multi-faceted professional analysis in determining a fair and equitable assessment for this property.";
    
    return combinedNarrative;
  };

  // Handle View Appeal Details
  const handleViewAppealDetails = (appeal: Appeal) => {
    setSelectedAppeal(appeal);
    setShowAppealDetailsModal(true);
  };

  // Handle Manage Appeal
  const handleManageAppeal = (appeal: Appeal) => {
    setManagedAppeal(appeal);
    setManagementTab("status");
    setShowAppealManagementModal(true);
  };

  // Handle Certificate Generation
  const handleGenerateCertificate = async (appeal: Appeal) => {
    setIsGeneratingCertificate(true);
    
    try {
      // Prepare certificate data from the appeal
      const appealData = {
        appeal_id: appeal.id,
        property_address: appeal.property,
        jurisdiction: appeal.jurisdiction,
        property_owner: "Property Owner", // Default since not in mock data
        filing_date: appeal.filedDate,
        resolution_date: appeal.completedDate || new Date().toISOString().split('T')[0],
        original_assessment: appeal.originalAssessment || appeal.currentAssessment,
        final_assessment: appeal.finalAssessment || appeal.proposedValue,
        firm_name: "CHARLY Property Tax Appeals",
        professional_name: "Professional Tax Consultant",
        professional_title: "Senior Property Tax Specialist",
        professional_license: "TC-12345",
        tax_rate: 0.021 // Default 2.1% tax rate
      };

      const response = await authenticatedRequest('/api/appeals/generate-certificate-test', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          appeal_data: appealData
        })
      });

      if (!response.ok) {
        throw new Error(`Certificate generation failed: ${response.status}`);
      }

      const result = await response.json();

      if (result.status === 'success') {
        toast({
          title: "Certificate Generated",
          description: `Certificate ${result.certificate_id} generated successfully for ${appeal.property}`,
        });

        // Trigger automatic download
        if (result.download_url) {
          try {
            const downloadResponse = await authenticatedRequest(result.download_url);
            if (downloadResponse.ok) {
              const blob = await downloadResponse.blob();
              const url = window.URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = url;
              a.download = `appeal_certificate_${result.certificate_id}.pdf`;
              document.body.appendChild(a);
              a.click();
              window.URL.revokeObjectURL(url);
              document.body.removeChild(a);

              toast({
                title: "Download Started",
                description: "Certificate PDF download has begun.",
              });
            }
          } catch (downloadError) {
            console.error("Download failed:", downloadError);
            toast({
              title: "Certificate Ready",
              description: `Certificate generated successfully. Download manually using ID: ${result.certificate_id}`,
            });
          }
        }
      } else {
        throw new Error(result.message || 'Certificate generation failed');
      }

    } catch (error) {
      console.error('Certificate generation error:', error);
      toast({
        title: "Certificate Generation Failed",
        description: "Unable to generate certificate. Please try again or contact support.",
        variant: "destructive"
      });
    } finally {
      setIsGeneratingCertificate(false);
    }
  };
  
  // Mock appeals data
  const openAppeals = [
    {
      id: "APL-001",
      property: "123 Main St, Austin, TX",
      currentAssessment: 450000,
      proposedValue: 380000,
      potentialSavings: 14000,
      filedDate: "2024-02-15",
      deadline: "2024-03-31",
      status: "Under Review",
      jurisdiction: "Travis County"
    },
    {
      id: "APL-002", 
      property: "456 Oak Ave, Houston, TX",
      currentAssessment: 285000,
      proposedValue: 265000,
      potentialSavings: 4200,
      filedDate: "2024-02-20",
      deadline: "2024-04-15",
      status: "Documents Requested",
      jurisdiction: "Harris County"
    }
  ];

  const inProgressAppeals = [
    {
      id: "APL-003",
      property: "789 Business Blvd, Dallas, TX",
      currentAssessment: 1200000,
      proposedValue: 950000,
      potentialSavings: 52500,
      filedDate: "2024-01-10",
      hearingDate: "2024-03-15",
      status: "Hearing Scheduled",
      jurisdiction: "Dallas County"
    }
  ];

  const wonAppeals = [
    {
      id: "APL-004",
      property: "321 Commerce St, San Antonio, TX",
      originalAssessment: 650000,
      finalAssessment: 520000,
      actualSavings: 27300,
      completedDate: "2024-01-25",
      status: "Won",
      jurisdiction: "Bexar County"
    },
    {
      id: "APL-005",
      property: "555 Industrial Dr, Fort Worth, TX", 
      originalAssessment: 890000,
      finalAssessment: 750000,
      actualSavings: 29400,
      completedDate: "2024-02-08",
      status: "Won",
      jurisdiction: "Tarrant County"
    }
  ];

  // Handler functions
  const handleOpenNewAppealModal = () => {
    setIsNewAppealModalOpen(true);
    setGeneratedNarrative("");
    setAppealForm({
      property_address: "",
      current_assessment: "",
      proposed_value: "",
      jurisdiction: "",
      reason: ""
    });
  };

  const handleGenerateNarrative = async () => {
    if (!appealForm.property_address || !appealForm.current_assessment || !appealForm.proposed_value) {
      toast({
        title: "Missing Information",
        description: "Please fill in all required fields before generating narrative.",
        variant: "destructive"
      });
      return;
    }

    setIsGeneratingNarrative(true);
    
    try {
      // Simulate narrative generation for frontend-only mode
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Generate a professional appeal narrative
      const currentAssessment = parseInt(appealForm.current_assessment);
      const proposedValue = parseInt(appealForm.proposed_value);
      const reduction = currentAssessment - proposedValue;
      const reductionPercent = ((reduction / currentAssessment) * 100).toFixed(1);
      
      const narrative = `PROPERTY TAX APPEAL NARRATIVE

Property Address: ${appealForm.property_address}
Jurisdiction: ${appealForm.jurisdiction || 'County Tax Assessor'}
Current Assessment: $${currentAssessment.toLocaleString()}
Proposed Value: $${proposedValue.toLocaleString()}
Requested Reduction: $${reduction.toLocaleString()} (${reductionPercent}%)

GROUNDS FOR APPEAL:
${appealForm.reason || 'The current assessment significantly exceeds the fair market value of the property based on recent comparable sales and income analysis.'}

SUPPORTING EVIDENCE:

1. COMPARABLE SALES ANALYSIS
Recent sales of similar properties in the immediate area indicate a market value substantially lower than the current assessment. The sales comparison approach supports a value of $${proposedValue.toLocaleString()}.

2. INCOME APPROACH ANALYSIS
Based on current market rents and operating expenses, the income capitalization approach indicates a value of $${proposedValue.toLocaleString()}, utilizing a market-derived capitalization rate.

3. ASSESSMENT UNIFORMITY
The subject property is assessed at a higher ratio to market value compared to similar properties in the neighborhood, violating the principle of assessment uniformity.

CONCLUSION:
Based on the comprehensive analysis using all three standard valuation approaches, we respectfully request the assessment be reduced to $${proposedValue.toLocaleString()} to reflect the property's true fair market value.

PREPARED BY: CHARLY AI Analysis System
DATE: ${new Date().toLocaleDateString()}`;
      
      setGeneratedNarrative(narrative);
      
      toast({
        title: "AI Narrative Generated",
        description: "The appeal narrative has been generated successfully. Click 'Generate Appeal Packet' to create a PDF.",
      });
      
    } catch (err) {
      console.error('Narrative generation error:', err);
      toast({
        title: "Generation Failed",
        description: "Unable to generate narrative. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGeneratingNarrative(false);
    }
  };

  const handleSubmitAppeal = async () => {
    if (!generatedNarrative) {
      toast({
        title: "No Narrative",
        description: "Please generate a narrative before creating the appeal packet.",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsGeneratingPacket(true);
      
      // Prepare packet request data to match backend schema
      const packetData = {
        packet_request: {
          property_id: currentAppealPrep?.property.id || `prop_${Date.now()}`,
          appeal_type: "standard",
          jurisdiction: appealForm.jurisdiction || "default"
        }
      };

      // Call the packet generation API (now works without auth for development)
      const response = await fetch('/api/appeals/generate-packet', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(packetData)
      });

      if (!response.ok) {
        throw new Error(`API call failed: ${response.status}`);
      }

      const result = await response.json();
      
      toast({
        title: "Appeal Packet Generated",
        description: `Professional appeal packet created with ID: ${result.packet_id}. Ready for download and filing.`,
      });
      
      // Trigger automatic download of the generated packet
      if (result.download_url) {
        try {
          const downloadResponse = await fetch(result.download_url);
          if (downloadResponse.ok) {
            const blob = await downloadResponse.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `appeal_packet_${result.packet_id}.pdf`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            toast({
              title: "Download Started",
              description: "Appeal packet PDF download has begun.",
            });
          }
        } catch (downloadError) {
          console.error("Download failed:", downloadError);
          toast({
            title: "Download Available",
            description: `Packet generated successfully. Download manually at: ${result.download_url}`,
          });
        }
      }
      
      setIsNewAppealModalOpen(false);
      
    } catch (error) {
      if (error instanceof Error) {
        console.error('Packet generation error details:', {
          error: error.message,
          stack: error.stack,
          timestamp: new Date().toISOString()
        });
      } else {
        console.error('Unknown error during packet generation:', error);
      }
      toast({
        title: "Packet Generation Failed", 
        description: "Unable to generate appeal packet. Please try again or contact support.",
        variant: "destructive"
      });
    } finally {
      setIsGeneratingPacket(false);
    }
  };

  // Bulk Generate Appeals Handler
  const handleBulkGenerate = async () => {
    if (selectedAppeals.length === 0) {
      toast({
        title: "No Appeals Selected",
        description: "Please select appeals to generate in bulk.",
        variant: "destructive"
      });
      return;
    }

    setIsBulkGenerating(true);
    try {
      const response = await authenticatedRequest('/api/bulk/generate-appeals', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          property_ids: selectedAppeals,
          appeal_type: 'assessment_reduction',
          jurisdiction: 'default'
        })
      });

      if (response.ok) {
        const result = await response.json();
        toast({
          title: "Bulk Generation Started",
          description: `Generating appeals for ${result.totalAppeals} properties. Estimated time: ${result.estimatedDuration} seconds.`,
        });
        setShowBulkModal(false);
        setSelectedAppeals([]);
      } else {
        throw new Error('Bulk generation failed');
      }
    } catch (error) {
      console.error('Bulk generation error:', error);
      toast({
        title: "Bulk Generation Failed",
        description: "Unable to generate appeals in bulk. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsBulkGenerating(false);
    }
  };

  // Export Appeals Handler
  const handleExportAppeals = async () => {
    setIsExporting(true);
    try {
      const response = await authenticatedRequest('/api/bulk/export-appeals', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          format: exportFormat,
          date_range: 'all',
          include_documents: false,
          status_filter: 'all'
        })
      });

      if (response.ok) {
        const result = await response.json();
        toast({
          title: "Export Started",
          description: `Exporting ${result.appealsCount} appeals in ${result.format.toUpperCase()} format. Estimated time: ${result.estimatedDuration} seconds.`,
        });
        
        // Simulate download completion
        setTimeout(() => {
          toast({
            title: "Export Complete",
            description: "Your appeals export is ready for download.",
          });
        }, 3000);
      } else {
        throw new Error('Export failed');
      }
    } catch (error) {
      console.error('Export error:', error);
      toast({
        title: "Export Failed",
        description: "Unable to export appeals data. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <div className="space-y-8">
      <div className="flex justify-between items-start">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">⚖️ Appeals</h1>
          <p className="text-gray-600">Manage and track your property tax appeals</p>
        </div>
        <div className="flex gap-3">
          <div className="relative">
            <Button 
              variant="outline"
              onClick={handleExportAppeals}
              disabled={isExporting}
            >
              {isExporting ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Exporting...
                </>
              ) : (
                <>
                  <Download className="w-4 h-4 mr-2" />
                  Export as {exportFormat.toUpperCase()}
                </>
              )}
            </Button>
            <select 
              className="absolute inset-0 opacity-0 cursor-pointer"
              value={exportFormat}
              onChange={(e) => {
                setExportFormat(e.target.value as 'csv' | 'excel' | 'pdf');
                if (!isExporting) {
                  handleExportAppeals();
                }
              }}
            >
              <option value="csv">CSV</option>
              <option value="excel">Excel</option>
              <option value="pdf">PDF</option>
            </select>
          </div>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="border-0 shadow-md">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 rounded-lg bg-blue-50">
                <FileText className="w-6 h-6 text-blue-600" />
              </div>
            </div>
            <p className="text-sm font-medium text-gray-600 mb-1">Open Appeals</p>
            <p className="text-3xl font-bold text-blue-700">{openAppeals.length}</p>
          </CardContent>
        </Card>

        <Card className="border-0 shadow-md">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 rounded-lg bg-orange-50">
                <Clock className="w-6 h-6 text-orange-600" />
              </div>
            </div>
            <p className="text-sm font-medium text-gray-600 mb-1">In Progress</p>
            <p className="text-3xl font-bold text-orange-700">{inProgressAppeals.length}</p>
          </CardContent>
        </Card>

        <Card className="border-0 shadow-md">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 rounded-lg bg-green-50">
                <CheckCircle className="w-6 h-6 text-green-600" />
              </div>
            </div>
            <p className="text-sm font-medium text-gray-600 mb-1">Appeals Won</p>
            <p className="text-3xl font-bold text-green-700">{wonAppeals.length}</p>
          </CardContent>
        </Card>

        <Card className="border-0 shadow-md">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 rounded-lg bg-purple-50">
                <Scale className="w-6 h-6 text-purple-600" />
              </div>
            </div>
            <p className="text-sm font-medium text-gray-600 mb-1">Total Savings</p>
            <p className="text-3xl font-bold text-purple-700">
              ${(wonAppeals.reduce((sum, appeal) => sum + appeal.actualSavings, 0)).toLocaleString()}
            </p>
          </CardContent>
        </Card>
      </div>


      {/* Appeals Tabs */}
      <div className="bg-white rounded-xl shadow-md p-6">
        <Tabs defaultValue="open" className="w-full">
          <TabsList className="bg-gray-100 p-1 rounded-lg">
            <TabsTrigger value="open" className="data-[state=active]:bg-white data-[state=active]:shadow-sm">
              Open Appeals ({openAppeals.length})
            </TabsTrigger>
            <TabsTrigger value="progress" className="data-[state=active]:bg-white data-[state=active]:shadow-sm">
              In Progress ({inProgressAppeals.length})
            </TabsTrigger>
            <TabsTrigger value="automated" className="data-[state=active]:bg-white data-[state=active]:shadow-sm">
              <Zap className="w-4 h-4 mr-1" />
              Automated Filing
            </TabsTrigger>
            <TabsTrigger value="won" className="data-[state=active]:bg-white data-[state=active]:shadow-sm">
              Won ({wonAppeals.length})
            </TabsTrigger>
            <TabsTrigger value="attorney" className="data-[state=active]:bg-white data-[state=active]:shadow-sm">
              <Scale className="w-4 h-4 mr-1" />
              Attorney Workflow
            </TabsTrigger>
          </TabsList>

          <TabsContent value="open" className="mt-6">
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h3 className="text-xl font-semibold text-gray-900">Open Appeals</h3>
                <div className="flex gap-3">
                  <Button 
                    variant="outline"
                    onClick={() => setShowBulkModal(true)}
                    disabled={openAppeals.length === 0}
                  >
                    <Package className="w-4 h-4 mr-2" />
                    Bulk Generate ({selectedAppeals.length})
                  </Button>
                  <Button className="bg-blue-600 hover:bg-blue-700" onClick={handleOpenNewAppealModal}>
                    <FileText className="w-4 h-4 mr-2" />
                    Generate Appeal Packet
                  </Button>
                </div>
              </div>
              
              {openAppeals.length === 0 ? (
                <div className="text-center py-12">
                  <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-700 mb-2">No open appeals</h3>
                  <p className="text-gray-500">Start by filing a new appeal for an over-assessed property</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {openAppeals.map((appeal) => (
                    <Card key={appeal.id} className="hover:shadow-md transition-shadow">
                      <CardContent className="p-6">
                        <div className="grid grid-cols-1 lg:grid-cols-4 gap-4">
                          <div className="lg:col-span-2">
                            <div className="flex items-start justify-between mb-2">
                              <div>
                                <h4 className="font-semibold text-gray-900">{appeal.property}</h4>
                                <p className="text-sm text-gray-600">{appeal.jurisdiction} • {appeal.id}</p>
                              </div>
                              <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200">
                                {appeal.status}
                              </Badge>
                            </div>
                            <div className="flex items-center text-sm text-gray-500 space-x-4">
                              <span>Filed: {appeal.filedDate}</span>
                              <span className="text-orange-600 font-medium">
                                Deadline: {appeal.deadline}
                              </span>
                            </div>
                          </div>
                          
                          <div className="space-y-1">
                            <p className="text-sm font-medium text-gray-700">Current Assessment</p>
                            <p className="text-lg font-semibold text-gray-900">
                              ${appeal.currentAssessment.toLocaleString()}
                            </p>
                            <p className="text-sm font-medium text-gray-700">Proposed Value</p>
                            <p className="text-lg font-semibold text-blue-600">
                              ${appeal.proposedValue.toLocaleString()}
                            </p>
                          </div>
                          
                          <div className="space-y-1">
                            <p className="text-sm font-medium text-gray-700">Potential Savings</p>
                            <p className="text-lg font-semibold text-green-600">
                              ${appeal.potentialSavings.toLocaleString()}
                            </p>
                            <div className="pt-2">
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => handleViewAppealDetails(appeal)}
                              >
                                View Details
                              </Button>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </div>
          </TabsContent>

          <TabsContent value="progress" className="mt-6">
            <div className="space-y-4">
              <h3 className="text-xl font-semibold text-gray-900">Appeals In Progress</h3>
              
              {inProgressAppeals.length === 0 ? (
                <div className="text-center py-12">
                  <Clock className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-700 mb-2">No appeals in progress</h3>
                  <p className="text-gray-500">Appeals will appear here once they move past initial filing</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {inProgressAppeals.map((appeal) => (
                    <Card key={appeal.id} className="hover:shadow-md transition-shadow">
                      <CardContent className="p-6">
                        <div className="grid grid-cols-1 lg:grid-cols-4 gap-4">
                          <div className="lg:col-span-2">
                            <div className="flex items-start justify-between mb-2">
                              <div>
                                <h4 className="font-semibold text-gray-900">{appeal.property}</h4>
                                <p className="text-sm text-gray-600">{appeal.jurisdiction} • {appeal.id}</p>
                              </div>
                              <Badge className="bg-orange-100 text-orange-700">
                                {appeal.status}
                              </Badge>
                            </div>
                            <div className="flex items-center text-sm text-gray-500 space-x-4">
                              <span>Filed: {appeal.filedDate}</span>
                              {appeal.hearingDate && (
                                <span className="text-blue-600 font-medium flex items-center">
                                  <Calendar className="w-4 h-4 mr-1" />
                                  Hearing: {appeal.hearingDate}
                                </span>
                              )}
                            </div>
                          </div>
                          
                          <div className="space-y-1">
                            <p className="text-sm font-medium text-gray-700">Current Assessment</p>
                            <p className="text-lg font-semibold text-gray-900">
                              ${appeal.currentAssessment.toLocaleString()}
                            </p>
                            <p className="text-sm font-medium text-gray-700">Proposed Value</p>
                            <p className="text-lg font-semibold text-blue-600">
                              ${appeal.proposedValue.toLocaleString()}
                            </p>
                          </div>
                          
                          <div className="space-y-1">
                            <p className="text-sm font-medium text-gray-700">Potential Savings</p>
                            <p className="text-lg font-semibold text-green-600">
                              ${appeal.potentialSavings.toLocaleString()}
                            </p>
                            <div className="pt-2 space-y-2">
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => handleViewAppealDetails(appeal)}
                                className="w-full"
                              >
                                View Details
                              </Button>
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => handleManageAppeal(appeal)}
                                className="w-full"
                              >
                                Manage Appeal
                              </Button>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </div>
          </TabsContent>

          <TabsContent value="automated" className="mt-6">
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-xl font-semibold text-gray-900">Automated Appeal Filing</h3>
                  <p className="text-gray-600 mt-1">Streamlined electronic filing with county integration</p>
                </div>
                <div className="bg-blue-50 text-blue-700 border-blue-200 px-3 py-1 rounded-full text-sm font-medium">
                  <Zap className="w-3 h-3 mr-1 inline" />
                  AI-Powered
                </div>
              </div>
              
              <AutomatedFiling 
                propertyId={propertyId || 'demo'} 
                onFilingComplete={(status) => {
                  toast({
                    title: "Appeal Filed Successfully",
                    description: `Filing ID: ${status.id}`,
                    variant: "default",
                  });
                }}
              />
            </div>
          </TabsContent>

          <TabsContent value="won" className="mt-6">
            <div className="space-y-4">
              <h3 className="text-xl font-semibold text-gray-900">Successfully Won Appeals</h3>
              
              {wonAppeals.length === 0 ? (
                <div className="text-center py-12">
                  <CheckCircle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-700 mb-2">No won appeals yet</h3>
                  <p className="text-gray-500">Completed successful appeals will appear here</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {wonAppeals.map((appeal) => (
                    <Card key={appeal.id} className="hover:shadow-md transition-shadow border-green-200">
                      <CardContent className="p-6">
                        <div className="grid grid-cols-1 lg:grid-cols-4 gap-4">
                          <div className="lg:col-span-2">
                            <div className="flex items-start justify-between mb-2">
                              <div>
                                <h4 className="font-semibold text-gray-900">{appeal.property}</h4>
                                <p className="text-sm text-gray-600">{appeal.jurisdiction} • {appeal.id}</p>
                              </div>
                              <Badge className="bg-green-100 text-green-700">
                                <CheckCircle className="w-3 h-3 mr-1" />
                                {appeal.status}
                              </Badge>
                            </div>
                            <div className="text-sm text-gray-500">
                              Completed: {appeal.completedDate}
                            </div>
                          </div>
                          
                          <div className="space-y-1">
                            <p className="text-sm font-medium text-gray-700">Original Assessment</p>
                            <p className="text-lg font-semibold text-gray-900">
                              ${appeal.originalAssessment.toLocaleString()}
                            </p>
                            <p className="text-sm font-medium text-gray-700">Final Assessment</p>
                            <p className="text-lg font-semibold text-blue-600">
                              ${appeal.finalAssessment.toLocaleString()}
                            </p>
                          </div>
                          
                          <div className="space-y-1">
                            <p className="text-sm font-medium text-gray-700">Total Savings</p>
                            <p className="text-lg font-semibold text-green-600">
                              ${appeal.actualSavings.toLocaleString()}
                            </p>
                            <div className="pt-2 space-y-2">
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => handleViewAppealDetails({...appeal, filedDate: ""})}
                                className="w-full"
                              >
                                View Details
                              </Button>
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => handleGenerateCertificate({...appeal, filedDate: ""})}
                                disabled={isGeneratingCertificate}
                                className="w-full"
                              >
                                {isGeneratingCertificate ? (
                                  <>
                                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                                    Generating...
                                  </>
                                ) : (
                                  <>
                                    <FileText className="w-4 h-4 mr-2" />
                                    Generate Certificate
                                  </>
                                )}
                              </Button>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </div>
          </TabsContent>

          <TabsContent value="attorney" className="mt-6">
            <TaxAttorneyWorkflow />
          </TabsContent>
        </Tabs>
      </div>

      {/* New Appeal Modal */}
      <Dialog open={isNewAppealModalOpen} onOpenChange={setIsNewAppealModalOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Generate Appeal Packet</DialogTitle>
            <DialogDescription>
              {currentAppealPrep ? 
                "Review property details and AI-generated narratives to create a professional appeal packet." :
                "Fill in the property details to generate an AI-powered appeal narrative."
              }
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="property_address">Property Address *</Label>
                <Input
                  id="property_address"
                  value={appealForm.property_address}
                  onChange={(e) => setAppealForm(prev => ({ ...prev, property_address: e.target.value }))}
                  placeholder="123 Main St, Austin, TX"
                />
              </div>
              <div>
                <Label htmlFor="jurisdiction">Jurisdiction</Label>
                <JurisdictionDropdown
                  value={appealForm.jurisdiction}
                  onValueChange={(value) => setAppealForm(prev => ({ ...prev, jurisdiction: value }))}
                  placeholder="Select jurisdiction"
                  verifiedOnly={true}
                  showStats={true}
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="current_assessment">Current Assessment *</Label>
                <Input
                  id="current_assessment"
                  type="number"
                  value={appealForm.current_assessment}
                  onChange={(e) => setAppealForm(prev => ({ ...prev, current_assessment: e.target.value }))}
                  placeholder="450000"
                />
              </div>
              <div>
                <Label htmlFor="proposed_value">Proposed Value *</Label>
                <Input
                  id="proposed_value"
                  type="number"
                  value={appealForm.proposed_value}
                  onChange={(e) => setAppealForm(prev => ({ ...prev, proposed_value: e.target.value }))}
                  placeholder="380000"
                />
              </div>
            </div>

            <div>
              <Label htmlFor="reason">Appeal Reason</Label>
              <Textarea
                id="reason"
                value={appealForm.reason}
                onChange={(e) => setAppealForm(prev => ({ ...prev, reason: e.target.value }))}
                placeholder="Brief description of why the assessment should be reduced..."
                rows={3}
              />
            </div>

            <div className="flex justify-between">
              <Button
                onClick={handleGenerateNarrative}
                disabled={isGeneratingNarrative}
                className="bg-green-600 hover:bg-green-700"
              >
                {isGeneratingNarrative ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>Generate AI Narrative</>
                )}
              </Button>
            </div>

            {generatedNarrative && (
              <div>
                <Label>Generated Narrative</Label>
                <Textarea
                  value={generatedNarrative}
                  onChange={(e) => setGeneratedNarrative(e.target.value)}
                  rows={12}
                  className="mt-2"
                />
              </div>
            )}
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsNewAppealModalOpen(false)}>
              Cancel
            </Button>
            <Button 
              onClick={handleSubmitAppeal} 
              disabled={!generatedNarrative || isGeneratingPacket}
              className="bg-green-600 hover:bg-green-700"
            >
              {isGeneratingPacket ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Generating Packet...
                </>
              ) : (
                <>
                  <FileText className="w-4 h-4 mr-2" />
                  Generate Appeal Packet
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Appeal Details Modal */}
      <Dialog open={showAppealDetailsModal} onOpenChange={setShowAppealDetailsModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <FileText className="w-6 h-6 text-blue-600" />
                <span>Appeal Details - {selectedAppeal?.id}</span>
              </div>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setShowAppealDetailsModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-4 h-4" />
              </Button>
            </DialogTitle>
          </DialogHeader>
          
          {selectedAppeal && (
            <div className="space-y-6">
              {/* Appeal Overview */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                  <CardContent className="p-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                      <Building className="w-5 h-5 mr-2 text-blue-600" />
                      Property Information
                    </h3>
                    <div className="space-y-3">
                      <div className="flex items-start">
                        <MapPin className="w-4 h-4 mt-1 mr-2 text-gray-500" />
                        <div>
                          <p className="text-sm font-medium text-gray-700">Address</p>
                          <p className="text-gray-900">{selectedAppeal.property}</p>
                        </div>
                      </div>
                      <div className="flex items-start">
                        <Scale className="w-4 h-4 mt-1 mr-2 text-gray-500" />
                        <div>
                          <p className="text-sm font-medium text-gray-700">Jurisdiction</p>
                          <p className="text-gray-900">{selectedAppeal.jurisdiction}</p>
                        </div>
                      </div>
                      <div className="flex items-start">
                        <FileText className="w-4 h-4 mt-1 mr-2 text-gray-500" />
                        <div>
                          <p className="text-sm font-medium text-gray-700">Appeal ID</p>
                          <p className="text-gray-900 font-mono">{selectedAppeal.id}</p>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                      <CalendarIcon className="w-5 h-5 mr-2 text-green-600" />
                      Timeline & Status
                    </h3>
                    <div className="space-y-3">
                      <div className="flex items-start">
                        <Calendar className="w-4 h-4 mt-1 mr-2 text-gray-500" />
                        <div>
                          <p className="text-sm font-medium text-gray-700">Filed Date</p>
                          <p className="text-gray-900">{selectedAppeal.filedDate}</p>
                        </div>
                      </div>
                      {selectedAppeal.deadline && (
                        <div className="flex items-start">
                          <AlertTriangle className="w-4 h-4 mt-1 mr-2 text-orange-500" />
                          <div>
                            <p className="text-sm font-medium text-gray-700">Deadline</p>
                            <p className="text-orange-600 font-medium">{selectedAppeal.deadline}</p>
                          </div>
                        </div>
                      )}
                      {selectedAppeal.hearingDate && (
                        <div className="flex items-start">
                          <Clock className="w-4 h-4 mt-1 mr-2 text-blue-500" />
                          <div>
                            <p className="text-sm font-medium text-gray-700">Hearing Date</p>
                            <p className="text-blue-600 font-medium">{selectedAppeal.hearingDate}</p>
                          </div>
                        </div>
                      )}
                      {selectedAppeal.completedDate && (
                        <div className="flex items-start">
                          <CheckCircle className="w-4 h-4 mt-1 mr-2 text-green-500" />
                          <div>
                            <p className="text-sm font-medium text-gray-700">Completed Date</p>
                            <p className="text-green-600 font-medium">{selectedAppeal.completedDate}</p>
                          </div>
                        </div>
                      )}
                      <div className="pt-2">
                        <Badge 
                          className={
                            selectedAppeal.status === 'Won' ? 'bg-green-100 text-green-700' :
                            selectedAppeal.status === 'Under Review' ? 'bg-yellow-100 text-yellow-700' :
                            selectedAppeal.status === 'Hearing Scheduled' ? 'bg-blue-100 text-blue-700' :
                            'bg-gray-100 text-gray-700'
                          }
                        >
                          {selectedAppeal.status}
                        </Badge>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Financial Information */}
              <Card>
                <CardContent className="p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <DollarSign className="w-5 h-5 mr-2 text-green-600" />
                    Financial Analysis
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="text-center p-4 bg-red-50 rounded-lg">
                      <p className="text-sm font-medium text-gray-700 mb-2">Current Assessment</p>
                      <p className="text-2xl font-bold text-red-600">
                        ${(selectedAppeal.currentAssessment || selectedAppeal.originalAssessment)?.toLocaleString()}
                      </p>
                    </div>
                    <div className="text-center p-4 bg-blue-50 rounded-lg">
                      <p className="text-sm font-medium text-gray-700 mb-2">
                        {selectedAppeal.proposedValue ? 'Proposed Value' : 'Final Assessment'}
                      </p>
                      <p className="text-2xl font-bold text-blue-600">
                        ${(selectedAppeal.proposedValue || selectedAppeal.finalAssessment)?.toLocaleString()}
                      </p>
                    </div>
                    <div className="text-center p-4 bg-green-50 rounded-lg">
                      <p className="text-sm font-medium text-gray-700 mb-2">
                        {selectedAppeal.actualSavings ? 'Actual Savings' : 'Potential Savings'}
                      </p>
                      <p className="text-2xl font-bold text-green-600">
                        ${(selectedAppeal.actualSavings || selectedAppeal.potentialSavings)?.toLocaleString()}
                      </p>
                    </div>
                  </div>
                  
                  {/* Savings Calculation */}
                  <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                    <h4 className="font-medium text-gray-900 mb-2">Tax Savings Calculation</h4>
                    <div className="text-sm text-gray-600 space-y-1">
                      <p>Assessment Reduction: ${((selectedAppeal.currentAssessment || selectedAppeal.originalAssessment) - (selectedAppeal.proposedValue || selectedAppeal.finalAssessment))?.toLocaleString()}</p>
                      <p>Tax Rate (est. 2.1%): ${(((selectedAppeal.currentAssessment || selectedAppeal.originalAssessment) - (selectedAppeal.proposedValue || selectedAppeal.finalAssessment)) * 0.021)?.toLocaleString()}</p>
                      <p className="font-medium text-green-600">Annual Tax Savings: ${(selectedAppeal.actualSavings || selectedAppeal.potentialSavings)?.toLocaleString()}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Supporting Documentation */}
              <Card>
                <CardContent className="p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <FileText className="w-5 h-5 mr-2 text-purple-600" />
                    Supporting Documentation
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="p-4 border border-gray-200 rounded-lg">
                      <h4 className="font-medium text-gray-900 mb-2">Property Appraisal</h4>
                      <p className="text-sm text-gray-600 mb-3">Professional appraisal supporting the proposed value reduction</p>
                      <Button variant="outline" size="sm" className="w-full">
                        <FileText className="w-4 h-4 mr-2" />
                        View Appraisal Report
                      </Button>
                    </div>
                    <div className="p-4 border border-gray-200 rounded-lg">
                      <h4 className="font-medium text-gray-900 mb-2">Comparable Sales</h4>
                      <p className="text-sm text-gray-600 mb-3">Market analysis with comparable property sales data</p>
                      <Button variant="outline" size="sm" className="w-full">
                        <FileText className="w-4 h-4 mr-2" />
                        View Comps Analysis
                      </Button>
                    </div>
                    <div className="p-4 border border-gray-200 rounded-lg">
                      <h4 className="font-medium text-gray-900 mb-2">AI Narratives</h4>
                      <p className="text-sm text-gray-600 mb-3">Professional narratives generated by AI analysis</p>
                      <Button variant="outline" size="sm" className="w-full">
                        <FileText className="w-4 h-4 mr-2" />
                        View AI Narratives
                      </Button>
                    </div>
                    <div className="p-4 border border-gray-200 rounded-lg">
                      <h4 className="font-medium text-gray-900 mb-2">Filing Documents</h4>
                      <p className="text-sm text-gray-600 mb-3">Official appeal forms and correspondence</p>
                      <Button variant="outline" size="sm" className="w-full">
                        <FileText className="w-4 h-4 mr-2" />
                        View Filing Docs
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Action Buttons */}
              <div className="flex space-x-3 pt-4">
                {selectedAppeal.status === 'Won' ? (
                  <>
                    <Button className="bg-green-600 hover:bg-green-700">
                      <CheckCircle className="w-4 h-4 mr-2" />
                      Download Certificate
                    </Button>
                    <Button variant="outline">
                      <FileText className="w-4 h-4 mr-2" />
                      View Final Documents
                    </Button>
                  </>
                ) : (
                  <>
                    <Button className="bg-blue-600 hover:bg-blue-700">
                      <FileText className="w-4 h-4 mr-2" />
                      Update Appeal
                    </Button>
                    <Button variant="outline">
                      <Calendar className="w-4 h-4 mr-2" />
                      Schedule Review
                    </Button>
                    <Button variant="outline">
                      <User className="w-4 h-4 mr-2" />
                      Contact Assessor
                    </Button>
                  </>
                )}
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Appeal Management Modal */}
      <Dialog open={showAppealManagementModal} onOpenChange={setShowAppealManagementModal}>
        <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Settings className="w-6 h-6 text-blue-600" />
                <span>Manage Appeal - {managedAppeal?.id}</span>
              </div>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setShowAppealManagementModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-4 h-4" />
              </Button>
            </DialogTitle>
          </DialogHeader>
          
          {managedAppeal && (
            <div className="space-y-6">
              {/* Appeal Management Tabs */}
              <Tabs value={managementTab} onValueChange={setManagementTab}>
                <TabsList className="grid w-full grid-cols-5">
                  <TabsTrigger value="status">Status</TabsTrigger>
                  <TabsTrigger value="documents">Documents</TabsTrigger>
                  <TabsTrigger value="timeline">Timeline</TabsTrigger>
                  <TabsTrigger value="deadlines">Deadlines</TabsTrigger>
                  <TabsTrigger value="communication">Communication</TabsTrigger>
                </TabsList>

                {/* Status Management Tab */}
                <TabsContent value="status" className="space-y-6 mt-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Current Status */}
                    <Card>
                      <CardContent className="p-6">
                        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                          <Activity className="w-5 h-5 mr-2 text-blue-600" />
                          Current Status
                        </h3>
                        <div className="space-y-4">
                          <div>
                            <label className="text-sm font-medium text-gray-700">Appeal Status</label>
                            <select className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                              <option value={managedAppeal.status}>{managedAppeal.status}</option>
                              <option value="Under Review">Under Review</option>
                              <option value="Additional Info Requested">Additional Info Requested</option>
                              <option value="Hearing Scheduled">Hearing Scheduled</option>
                              <option value="Decision Pending">Decision Pending</option>
                              <option value="Won">Won</option>
                              <option value="Lost">Lost</option>
                              <option value="Settled">Settled</option>
                            </select>
                          </div>
                          <div>
                            <label className="text-sm font-medium text-gray-700">Internal Notes</label>
                            <textarea 
                              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                              rows={4}
                              placeholder="Add internal notes about this appeal..."
                            />
                          </div>
                          <Button className="w-full">
                            <Save className="w-4 h-4 mr-2" />
                            Update Status
                          </Button>
                        </div>
                      </CardContent>
                    </Card>

                    {/* Financial Summary */}
                    <Card>
                      <CardContent className="p-6">
                        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                          <DollarSign className="w-5 h-5 mr-2 text-green-600" />
                          Financial Summary
                        </h3>
                        <div className="space-y-3">
                          <div className="flex justify-between">
                            <span className="text-sm font-medium text-gray-700">Current Assessment</span>
                            <span className="text-lg font-semibold">${managedAppeal.currentAssessment?.toLocaleString()}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm font-medium text-gray-700">Proposed Value</span>
                            <span className="text-lg font-semibold text-blue-600">${managedAppeal.proposedValue?.toLocaleString()}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm font-medium text-gray-700">Potential Savings</span>
                            <span className="text-lg font-semibold text-green-600">${managedAppeal.potentialSavings?.toLocaleString()}</span>
                          </div>
                          {managedAppeal.finalAssessment && (
                            <div className="flex justify-between pt-2 border-t">
                              <span className="text-sm font-medium text-gray-700">Final Assessment</span>
                              <span className="text-lg font-semibold text-purple-600">${managedAppeal.finalAssessment.toLocaleString()}</span>
                            </div>
                          )}
                          {managedAppeal.actualSavings && (
                            <div className="flex justify-between">
                              <span className="text-sm font-medium text-gray-700">Actual Savings</span>
                              <span className="text-lg font-semibold text-green-600">${managedAppeal.actualSavings.toLocaleString()}</span>
                            </div>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </TabsContent>

                {/* Documents Management Tab */}
                <TabsContent value="documents" className="space-y-6 mt-6">
                  <Card>
                    <CardContent className="p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                        <FileText className="w-5 h-5 mr-2 text-blue-600" />
                        Document Management
                      </h3>
                      <div className="space-y-4">
                        {/* Upload Area */}
                        <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                          <Upload className="mx-auto h-12 w-12 text-gray-400" />
                          <div className="mt-4">
                            <p className="text-sm text-gray-600">
                              Drag and drop files here, or{" "}
                              <button 
                                className="text-blue-600 hover:text-blue-500"
                                onClick={() => document.getElementById('documents-file-upload')?.click()}
                              >
                                browse
                              </button>
                              <input
                                id="documents-file-upload"
                                type="file"
                                multiple
                                accept=".pdf,.doc,.docx,.jpg,.png,.jpeg"
                                className="hidden"
                                onChange={(e) => {
                                  if (e.target.files) {
                                    toast({
                                      title: "Documents Uploaded",
                                      description: `${e.target.files.length} document(s) uploaded successfully`,
                                    });
                                  }
                                }}
                              />
                            </p>
                            <p className="text-xs text-gray-500 mt-1">
                              PDF, DOC, DOCX, JPG, PNG up to 10MB
                            </p>
                          </div>
                        </div>

                        {/* Existing Documents */}
                        <div className="space-y-2">
                          <h4 className="font-medium text-gray-900">Uploaded Documents</h4>
                          <div className="space-y-2">
                            <div className="flex items-center justify-between p-3 border rounded-lg">
                              <div className="flex items-center space-x-3">
                                <FileText className="w-5 h-5 text-blue-600" />
                                <div>
                                  <p className="text-sm font-medium text-gray-900">Property_Appraisal_Report.pdf</p>
                                  <p className="text-xs text-gray-500">Uploaded 2 days ago • 2.4 MB</p>
                                </div>
                              </div>
                              <div className="flex items-center space-x-2">
                                <Button variant="ghost" size="sm">
                                  <Download className="w-4 h-4" />
                                </Button>
                                <Button variant="ghost" size="sm" className="text-red-600">
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            </div>
                            <div className="flex items-center justify-between p-3 border rounded-lg">
                              <div className="flex items-center space-x-3">
                                <FileText className="w-5 h-5 text-blue-600" />
                                <div>
                                  <p className="text-sm font-medium text-gray-900">Comparable_Sales_Analysis.xlsx</p>
                                  <p className="text-xs text-gray-500">Uploaded 1 week ago • 856 KB</p>
                                </div>
                              </div>
                              <div className="flex items-center space-x-2">
                                <Button variant="ghost" size="sm">
                                  <Download className="w-4 h-4" />
                                </Button>
                                <Button variant="ghost" size="sm" className="text-red-600">
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>

                {/* Timeline Tab */}
                <TabsContent value="timeline" className="space-y-6 mt-6">
                  <Card>
                    <CardContent className="p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                        <Clock className="w-5 h-5 mr-2 text-blue-600" />
                        Appeal Timeline
                      </h3>
                      <div className="space-y-4">
                        <div className="flex space-x-4">
                          <div className="flex-shrink-0">
                            <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                          </div>
                          <div className="flex-grow">
                            <p className="text-sm font-medium text-gray-900">Appeal Filed</p>
                            <p className="text-xs text-gray-500">{managedAppeal.filedDate}</p>
                            <p className="text-sm text-gray-600 mt-1">Initial appeal submitted to assessment board</p>
                          </div>
                        </div>
                        <div className="flex space-x-4">
                          <div className="flex-shrink-0">
                            <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                          </div>
                          <div className="flex-grow">
                            <p className="text-sm font-medium text-gray-900">Under Review</p>
                            <p className="text-xs text-gray-500">Current Status</p>
                            <p className="text-sm text-gray-600 mt-1">Assessment board is reviewing the appeal</p>
                          </div>
                        </div>
                        {managedAppeal.hearingDate && (
                          <div className="flex space-x-4">
                            <div className="flex-shrink-0">
                              <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2"></div>
                            </div>
                            <div className="flex-grow">
                              <p className="text-sm font-medium text-gray-900">Hearing Scheduled</p>
                              <p className="text-xs text-gray-500">{managedAppeal.hearingDate}</p>
                              <p className="text-sm text-gray-600 mt-1">Formal hearing with assessment board</p>
                            </div>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>

                {/* Deadlines Tab */}
                <TabsContent value="deadlines" className="space-y-6 mt-6">
                  <Card>
                    <CardContent className="p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                        <AlertTriangle className="w-5 h-5 mr-2 text-orange-600" />
                        Deadlines & Reminders
                      </h3>
                      <div className="space-y-4">
                        {managedAppeal.deadline && (
                          <div className="p-4 border border-orange-200 rounded-lg bg-orange-50">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-sm font-medium text-orange-800">Response Deadline</p>
                                <p className="text-lg font-semibold text-orange-600">{managedAppeal.deadline}</p>
                              </div>
                              <AlertTriangle className="w-6 h-6 text-orange-500" />
                            </div>
                          </div>
                        )}
                        {managedAppeal.hearingDate && (
                          <div className="p-4 border border-blue-200 rounded-lg bg-blue-50">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-sm font-medium text-blue-800">Hearing Date</p>
                                <p className="text-lg font-semibold text-blue-600">{managedAppeal.hearingDate}</p>
                              </div>
                              <Calendar className="w-6 h-6 text-blue-500" />
                            </div>
                          </div>
                        )}
                        
                        <div className="space-y-2">
                          <h4 className="font-medium text-gray-900">Set Reminder</h4>
                          <div className="flex space-x-2">
                            <input
                              type="date"
                              className="flex-grow rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                            />
                            <Button
                              onClick={() => {
                                toast({
                                  title: "Reminder Added",
                                  description: "Deadline reminder has been set successfully",
                                });
                              }}
                            >
                              <Bell className="w-4 h-4 mr-2" />
                              Add Reminder
                            </Button>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>

                {/* Communication Tab */}
                <TabsContent value="communication" className="space-y-6 mt-6">
                  <Card>
                    <CardContent className="p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                        <MessageSquare className="w-5 h-5 mr-2 text-blue-600" />
                        Communication Log
                      </h3>
                      <div className="space-y-4">
                        {/* Communication History */}
                        <div className="space-y-3">
                          <div className="p-3 border rounded-lg">
                            <div className="flex justify-between items-start mb-2">
                              <p className="text-sm font-medium text-gray-900">Email to Assessment Board</p>
                              <p className="text-xs text-gray-500">2 days ago</p>
                            </div>
                            <p className="text-sm text-gray-600">
                              Follow-up on appeal APL-001 requesting status update and confirmation of received documents.
                            </p>
                          </div>
                          <div className="p-3 border rounded-lg">
                            <div className="flex justify-between items-start mb-2">
                              <p className="text-sm font-medium text-gray-900">Phone Call with Assessor</p>
                              <p className="text-xs text-gray-500">1 week ago</p>
                            </div>
                            <p className="text-sm text-gray-600">
                              Discussed comparable sales analysis and provided additional property details.
                            </p>
                          </div>
                        </div>

                        {/* New Communication */}
                        <div className="border-t pt-4">
                          <h4 className="font-medium text-gray-900 mb-3">New Communication</h4>
                          <div className="space-y-3">
                            <div>
                              <label className="text-sm font-medium text-gray-700">Type</label>
                              <select className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option>Email</option>
                                <option>Phone Call</option>
                                <option>In-Person Meeting</option>
                                <option>Letter</option>
                              </select>
                            </div>
                            <div>
                              <label className="text-sm font-medium text-gray-700">Notes</label>
                              <textarea 
                                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                rows={3}
                                placeholder="Add communication notes..."
                              />
                            </div>
                            <Button
                              onClick={() => {
                                toast({
                                  title: "Communication Log Added",
                                  description: "Communication entry has been recorded successfully",
                                });
                              }}
                            >
                              <Plus className="w-4 h-4 mr-2" />
                              Add Communication Log
                            </Button>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>
              </Tabs>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Bulk Generate Appeals Modal */}
      <Dialog open={showBulkModal} onOpenChange={setShowBulkModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              <Package className="w-5 h-5 text-blue-600" />
              <span>Bulk Generate Appeals</span>
            </DialogTitle>
            <DialogDescription>
              Generate appeals for multiple properties in bulk. This will create standardized appeal packets for all selected properties.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium text-gray-700">Selected Appeals:</label>
              <p className="text-sm text-gray-600 mt-1">
                {selectedAppeals.length} properties selected for bulk generation
              </p>
            </div>
            
            <div>
              <label className="text-sm font-medium text-gray-700">Appeal Type:</label>
              <p className="text-sm text-gray-600 mt-1">Assessment Reduction</p>
            </div>
            
            <div>
              <label className="text-sm font-medium text-gray-700">Jurisdiction:</label>
              <p className="text-sm text-gray-600 mt-1">Default County</p>
            </div>
            
            <div className="bg-blue-50 p-3 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>Note:</strong> This will generate standardized appeal packets for all selected properties. Each appeal will use the property's current assessment data and market analysis.
              </p>
            </div>
          </div>
          
          <DialogFooter className="space-x-2">
            <Button 
              variant="outline" 
              onClick={() => setShowBulkModal(false)}
              disabled={isBulkGenerating}
            >
              Cancel
            </Button>
            <Button 
              onClick={handleBulkGenerate}
              disabled={isBulkGenerating || selectedAppeals.length === 0}
              className="bg-blue-600 hover:bg-blue-700"
            >
              {isBulkGenerating ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Package className="w-4 h-4 mr-2" />
                  Generate {selectedAppeals.length} Appeals
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

    </div>
  );
}

export default Appeals;