name: Lighthouse CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.13.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

  lighthouse-mobile:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI (Mobile)
        run: |
          npm install -g @lhci/cli@0.13.x
          lhci autorun --config=lighthouserc.mobile.json
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Mobile Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results-mobile
          path: .lighthouseci/
          retention-days: 30

  performance-budget:
    runs-on: ubuntu-latest
    needs: [lighthouse]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Download Lighthouse results
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

      - name: Performance Budget Analysis
        run: |
          echo "## Performance Budget Analysis üìä" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Budget | Actual | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Extract metrics from Lighthouse results and compare against budgets
          # This would parse the JSON results and create a summary table
          
          echo "‚úÖ Performance budget analysis completed" >> $GITHUB_STEP_SUMMARY

      - name: Comment Performance Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            
            // Read Lighthouse results
            const results = JSON.parse(fs.readFileSync('.lighthouseci/lhr-*.json', 'utf8'));
            
            const comment = `## üîç Lighthouse Performance Report
            
            ### Performance Scores
            - **Performance**: ${Math.round(results.categories.performance.score * 100)}/100
            - **Accessibility**: ${Math.round(results.categories.accessibility.score * 100)}/100  
            - **Best Practices**: ${Math.round(results.categories['best-practices'].score * 100)}/100
            - **SEO**: ${Math.round(results.categories.seo.score * 100)}/100
            
            ### Core Web Vitals
            - **First Contentful Paint**: ${Math.round(results.audits['first-contentful-paint'].numericValue)}ms
            - **Largest Contentful Paint**: ${Math.round(results.audits['largest-contentful-paint'].numericValue)}ms
            - **Total Blocking Time**: ${Math.round(results.audits['total-blocking-time'].numericValue)}ms
            - **Cumulative Layout Shift**: ${results.audits['cumulative-layout-shift'].numericValue.toFixed(3)}
            
            [View Full Report](${results.reportUrl || 'Generated in CI'})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });